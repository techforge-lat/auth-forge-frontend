/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AppsIndexImport } from './routes/apps/index'
import { Route as AppsAppCodeImport } from './routes/apps/$appCode'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppsIndexRoute = AppsIndexImport.update({
  id: '/apps/',
  path: '/apps/',
  getParentRoute: () => rootRoute,
} as any)

const AppsAppCodeRoute = AppsAppCodeImport.update({
  id: '/apps/$appCode',
  path: '/apps/$appCode',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/apps/$appCode': {
      id: '/apps/$appCode'
      path: '/apps/$appCode'
      fullPath: '/apps/$appCode'
      preLoaderRoute: typeof AppsAppCodeImport
      parentRoute: typeof rootRoute
    }
    '/apps/': {
      id: '/apps/'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/apps/$appCode': typeof AppsAppCodeRoute
  '/apps': typeof AppsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/apps/$appCode': typeof AppsAppCodeRoute
  '/apps': typeof AppsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/apps/$appCode': typeof AppsAppCodeRoute
  '/apps/': typeof AppsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/apps/$appCode' | '/apps'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/apps/$appCode' | '/apps'
  id: '__root__' | '/' | '/apps/$appCode' | '/apps/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppsAppCodeRoute: typeof AppsAppCodeRoute
  AppsIndexRoute: typeof AppsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppsAppCodeRoute: AppsAppCodeRoute,
  AppsIndexRoute: AppsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/apps/$appCode",
        "/apps/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/apps/$appCode": {
      "filePath": "apps/$appCode.tsx"
    },
    "/apps/": {
      "filePath": "apps/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
